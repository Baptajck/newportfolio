{"version":3,"sources":["components/Header/Nav/index.js","components/Header/index.js","utils/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Nav","useState","open","isOpen","className","onClick","href","Header","width","isSSR","window","innerWidth","height","innerHeight","windowSize","setWindowSize","changeWindowSize","useEffect","addEventListener","removeEventListener","useWindowSize","id","App","Boolean","location","hostname","match","rootComponent","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+VA0CeA,EArCH,WAAO,IAAD,EACOC,oBAAS,GADhB,mBACTC,EADS,KACHC,EADG,KAKhB,OACE,yBAAKC,UAAU,OAcb,6BACE,yBAAKA,UAAU,aAAaC,QAlBnB,kBAAMF,GAAQD,KAkBwBA,EAA6B,kBAAC,IAAD,MAAtB,kBAAC,IAAD,OACtD,wBAAIE,UAAS,oBAAeF,GAAQ,mBAChC,wBAAIE,UAAWF,GAAQ,QAAQ,uBAAGI,KAAK,iBAAR,oBAC/B,wBAAIF,UAAWF,GAAQ,QAAQ,uBAAGI,KAAK,gBAAR,mBAC/B,wBAAIF,UAAWF,GAAQ,QAAQ,uBAAGI,KAAK,YAAR,YAC/B,wBAAIF,UAAWF,GAAQ,QAAQ,uBAAGI,KAAK,YAAR,gBCJ5BC,EAtBA,WAAO,IACZC,ECAmB,WAC3B,IAAMC,EAA0B,qBAAXC,OADY,EAEGT,mBAAS,CAC3CO,MAAOC,GAASC,OAAOC,WACvBC,OAAQH,EAAQ,IAAMC,OAAOG,cAJE,mBAE1BC,EAF0B,KAEdC,EAFc,KAO3BC,EAAmB,WACvBD,EAAc,CAAEP,MAAOE,OAAOC,WAAYC,OAAQF,OAAOG,eAW3D,OARAI,qBAAU,WAGR,OAFAP,OAAOQ,iBAAiB,SAAUF,GAE3B,WACLN,OAAOS,oBAAoB,SAAUH,MAEtC,IAEIF,EDnBWM,GAAVZ,MAER,OACE,yBAAKJ,UAAU,SAASiB,GAAG,mBACzB,wBAAIjB,UAAU,gBAAd,YAEEI,GAAS,IACP,kBAAC,EAAD,MAEA,wBAAIJ,UAAU,eACZ,wBAAIA,UAAU,oBAAd,mBACA,wBAAIA,UAAU,oBAAd,kBACA,wBAAIA,UAAU,oBAAd,WACA,wBAAIA,UAAU,oBAAd,cEEGkB,EAZH,WACV,OACE,yBAAKlB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,UCFUmB,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2D,WCTAC,EACJ,kBAAC,IAAD,KACE,kBAAC,EAAD,OAKJC,iBAAOD,EAAeE,SAASC,eAAe,SDmHxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4cf864ac.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Nav.scss';\r\nimport { GiHamburgerMenu } from \"react-icons/gi\";\r\nimport { MdClose } from \"react-icons/md\";\r\n\r\nconst Nav = () => {\r\n  const [open, isOpen] = useState(false);\r\n\r\n  const toggle = () => isOpen(!open);\r\n  \r\n  return (\r\n    <div className=\"nav\">\r\n      {/* <div className=\"nav-burger\" onClick={toggle}>{!open ? <GiHamburgerMenu /> : <MdClose />}</div> */}\r\n\r\n      {/*\r\n        open && (\r\n          <ul className=\"nav-list\">\r\n            <li className=\"nav-list-item\">Presentation</li>\r\n            <li className=\"nav-list-item\">Compétences</li>\r\n            <li className=\"nav-list-item\">Projets</li>\r\n            <li className=\"nav-list-item\">Contact</li>\r\n          </ul>\r\n        )\r\n      */}\r\n\r\n      <nav>\r\n        <div className=\"nav-burger\" onClick={toggle}>{!open ? <GiHamburgerMenu /> : <MdClose />}</div>\r\n        <ul className={`nav-links ${open && \"open nav-links\"}`}>\r\n            <li className={open && \"fade\"}><a href=\"#presentation\">Présentation</a></li>\r\n            <li className={open && \"fade\"}><a href=\"#competences\">Compétences</a></li>\r\n            <li className={open && \"fade\"}><a href=\"#projets\">Projets</a></li>\r\n            <li className={open && \"fade\"}><a href=\"#contact\">Contact</a></li>\r\n            {/* \r\n              <li><button className=\"login-button\" href=\"#\">Login</button></li>\r\n              <li><button className=\"join-button\" href=\"#\">Join</button></li>\r\n            */}\r\n        </ul>\r\n    </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;","import React from 'react';\nimport './Header.scss';\nimport Nav from './Nav';\nimport { useWindowSize } from '../../utils';\n\nconst Header = () => {\n  const { width } = useWindowSize();\n\n  return (\n    <div className=\"header\" id=\"outer-container\">\n      <h1 className=\"header-title\">baptjack</h1>\n      {\n        width <= 768 ? (\n          <Nav />\n        ) : (\n          <ul className=\"header-list\">\n            <li className=\"header-list-item\">Présentation</li>\n            <li className=\"header-list-item\">Compétences</li>\n            <li className=\"header-list-item\">Projets</li>\n            <li className=\"header-list-item\">Contact</li>\n          </ul>\n        )\n      }\n    </div>\n  );\n}\n\nexport default Header;","import { useState, useEffect } from 'react';\r\n\r\n/**\r\n  * function permettant de voir la largeur/hauteur de la page et de mettre ce que l'on souhaite\r\n  * On peut changer les chiffres pour avoir le rapport qu'on souhaite\r\n  */\r\nexport const useWindowSize = () => {\r\n  const isSSR = typeof window !== \"undefined\";\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: isSSR && window.innerWidth,\r\n    height: isSSR ? 800 : window.innerHeight,\r\n  });\r\n\r\n  const changeWindowSize = () => {\r\n    setWindowSize({ width: window.innerWidth, height: window.innerHeight });\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", changeWindowSize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", changeWindowSize);\r\n    };\r\n  }, []);\r\n\r\n  return windowSize;\r\n}","import React from 'react';\nimport './App.scss';\nimport { Route, Switch } from 'react-router-dom';\n\n/**\n * Import local de components\n */\nimport Header from '../Header';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Switch>\n        <Route>\n          <Header />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './styles/reset.scss';\nimport './styles/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n// == Render\nconst rootComponent = (\n  <Router>\n    <App />\n  </Router>\n);\n\n// Le rendu de React => DOM\nrender(rootComponent, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}